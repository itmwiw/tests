apiVersion: v1
kind: ServiceAccount
metadata:
  name: listener-interceptor
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: tekton-triggers
rules:
# Permissions for every EventListener deployment to function
- apiGroups: ["triggers.tekton.dev"]
  resources: ["eventlisteners", "triggerbindings", "triggertemplates"]
  verbs: ["get"]
- apiGroups: [""]
  # secrets are only needed for Github/Gitlab interceptors, serviceaccounts only for per trigger authorization
  resources: ["configmaps", "secrets", "serviceaccounts"]
  verbs: ["get", "list", "watch"]
# Permissions to create resources in associated TriggerTemplates
- apiGroups: ["tekton.dev"]
  resources: ["pipelineruns", "pipelineresources", "taskruns"]
  verbs: ["create"]
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: tekton-triggers-cluster
rules:
# Permissions to create resources in associated TriggerTemplates
- apiGroups: ["tekton.dev"]
  resources: ["clusterinterceptors"]
  verbs: ["get","list","watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: tekton-triggers
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: tekton-triggers
subjects:
- kind: ServiceAccount
  name: listener-interceptor
  namespace: onehq-pipelines
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: tekton-triggers-cluster
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: tekton-triggers-cluster
subjects:
- kind: ServiceAccount
  name: listener-interceptor
  namespace: onehq-pipelines
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: clustertriggerbindings-reader-onehq
rules:
  - verbs:
      - get
      - list
      - watch
      - create
    apiGroups:
      - 'triggers.tekton.dev'
    resources:
      - clustertriggerbindings

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: clustertriggegrbindings-reader-onehq
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: clustertriggerbindings-reader-onehq
subjects:
- kind: ServiceAccount
  name: pipeline
  namespace: onehq-pipelines
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    cert-manager.io/cluster-issuer: "selfsigning"
    acme.cert-manager.io/http01-ingress-class: "kubernetes-nginx-public"
  labels:
    ingressClassName: "kubernetes-nginx-public"

  name: github-listener-interceptor

spec:
  ingressClassName: "kubernetes-nginx-public"
  tls:
  - hosts:
      - tekton-listener.onehq.com
    secretName: github-listener-interceptor-tls  
  rules:
  - host: tekton-listener.onehq.com
    http:      
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: el-github-listener-interceptor
            port: 
              number: 8080
---
apiVersion: triggers.tekton.dev/v1beta1
kind: EventListener
metadata:
  name: github-listener-interceptor
spec:
  serviceAccountName: pipeline
  resources:
    kubernetesResource:
      replicas: 3

  triggers:
    - name: pull-request
      bindings:
      - ref: github-pr-binding 
      interceptors:
      - ref:
          name: "github"
        params:
        - name: secretRef
          value:
            secretName: github-bot-creds
            secretKey: secretToken
      - ref:
          name: "cel"
        params:
        - name: filter
          value: "body.action in ['opened', 'synchronize', 'reopened']"
        - name: overlays
          value:
            - key: short_sha
              expression: "body.pull_request.head.sha.truncate(7)" 
            - key: sanitized_repo_name
              expression: "body.pull_request.head.repo.name.replace('_','-')" 



      template:
        ref: create-pipeline-template
    - name: main
      bindings:
      - ref: github-main-binding 
      interceptors:
      - ref:
          name: "github"
        params:
        - name: secretRef
          value:
            secretName: github-bot-creds
            secretKey: secretToken
      - ref:
          name: "cel"
        params:
        - name: filter
          value: "(header.match('X-GitHub-Event', 'push')) && (body.ref == 'refs/heads/main')"
        - name: overlays
          value:
            - key: short_sha
              expression: "body.after.truncate(7)"
            - key: sanitized_repo_name
              expression: "body.repository.name.replace('_','-')" 
      template:
        ref: create-pipeline-template        
    - name: master
      bindings:
      - ref: github-main-binding 
      interceptors:
      - ref:
          name: "github"
        params:
        - name: secretRef
          value:
            secretName: github-bot-creds
            secretKey: secretToken
      - ref:
          name: "cel"
        params:
        - name: filter
          value: "(header.match('X-GitHub-Event', 'push')) && (body.ref == 'refs/heads/master')"
        - name: overlays
          value:
            - key: short_sha
              expression: "body.after.truncate(7)"
            - key: sanitized_repo_name
              expression: "body.repository.name.replace('_','-')" 
      template:
        ref: create-pipeline-template
    - name: v4
      bindings:
      - ref: github-v4-binding 
      interceptors:
      - ref:
          name: "github"
        params:
        - name: secretRef
          value:
            secretName: github-bot-creds
            secretKey: secretToken
      - ref:
          name: "cel"
        params:
        - name: filter
          value: "(header.match('X-GitHub-Event', 'push')) && (body.ref == 'refs/heads/v4')"
        - name: overlays
          value:
            - key: short_sha
              expression: "body.after.truncate(7)"
            - key: sanitized_repo_name
              expression: "body.repository.name.replace('_','-')" 
      template:
        ref: create-pipeline-template
---
apiVersion: triggers.tekton.dev/v1beta1
kind: TriggerTemplate
metadata:
  name: create-pipeline-template
spec:
  params:
  - name: pipeline-type
    description: Git refpsec
  - name: git-ref
    description: Git refpsec
  - name: github-repo-name
    description: Git refpsec

  - name: pipeline-instance
    description: Branch name

  - name: git-sha
  resourcetemplates:
  - apiVersion: tekton.dev/v1beta1
    kind: PipelineRun
    metadata:
      generateName: "create-$(tt.params.pipeline-instance)-"
    spec:
      serviceAccountName: onehq-pipelines
      params:
      # git params
      - name: gitOrganization
        value: 'OneHQ'
      - name: repoName
        value: '$(tt.params.github-repo-name)'
      - name: gitSha
        value: '$(tt.params.git-sha)'
      # - name: gitUrl
      #   value: URL of git repository 
      - name: gitRef
        value: "$(tt.params.git-ref)"
      # Vault params
      - name: vaultAddress
        value: https://vault-onehq.apps.hub.internal.onehq.com

      # Tekton params
      - name: pipelineType
        value: $(tt.params.pipeline-type)
      - name: pipelineInstance
        value: "$(tt.params.pipeline-instance)"  


      pipelineRef:
        name: create-pipeline
      timeout: 5m0s
      workspaces:
        - name: git-source
          volumeClaimTemplate:
            spec:
              accessModes:
                - ReadWriteOnce # access mode may affect how you can use this volume in parallel tasks
              resources:
                requests:
                  storage: 1Gi
---
apiVersion: triggers.tekton.dev/v1beta1
kind: TriggerBinding
metadata:
  name: github-pr-binding
spec:
  params:
    - name: git-sha
      value: "$(body.pull_request.head.sha)"
    - name: pipeline-type
      value: pr
    - name: git-ref
      value: "refs/pull/$(body.number)/head"
    - name: github-repo-name
      value: "$(body.pull_request.head.repo.name)"
    - name: pipeline-instance
      value: "$(extensions.sanitized_repo_name)-pr-$(body.number)-pipeline"
---
apiVersion: triggers.tekton.dev/v1beta1
kind: TriggerBinding
metadata:
  name: github-main-binding
spec:
  params:
    - name: pipeline-type
      value: main

    - name: git-sha
      value: "$(body.after)"

    - name: git-ref
      value: "$(body.ref)"
    - name: github-repo-name
      value: "$(body.repository.name)"
    - name: pipeline-instance
      value: "$(extensions.sanitized_repo_name)-main-pipeline"
---
apiVersion: triggers.tekton.dev/v1beta1
kind: TriggerBinding
metadata:
  name: github-v4-binding
spec:
  params:
    - name: pipeline-type
      value: v4

    - name: git-sha
      value: "$(body.after)"

    - name: git-ref
      value: "$(body.ref)"
    - name: github-repo-name
      value: "$(body.repository.name)"
    - name: pipeline-instance
      value: "$(extensions.sanitized_repo_name)-v4-pipeline"