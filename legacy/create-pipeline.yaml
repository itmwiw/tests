apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: create-pipeline
spec:
  params:
  # Helm params
  - name: helmVersion
    type: string
    description: Helm version
    default: '3.8.2'
  # oc params
  - name: ocVersion
    type: string
    description: oc CLI version
    default: '4.8'
  # git params
  - name: gitProvider
    default: github.com
  - name: gitOrganization
  - name: repoName
  - name: gitSha
  - name: gitRef
  # Vault params
  - name: vaultAddress
    type: string
    description: Vault address
  # Tekton params
  - name: pipelineType
    default: 'pr'
  - name: pipelineInstance
    type: string

  workspaces:
  - name: git-source
  
  tasks:
  
# This job gets the source from git 
  - name: fetch-from-git
    taskRef:
      name: git-clone
      kind: Task
    params:
    - name: url
      value: https://github.com/$(params.gitOrganization)/$(params.repoName).git
    - name: refspec
      value: "$(params.gitRef):refs/heads/workingcopy"
    - name: revision
      value: workingcopy
    workspaces:
    - name: output
      workspace: git-source

  - name: create-pipeline
    runAfter:
    - fetch-from-git
    workspaces:
    - name: source
      workspace: git-source
    taskRef:
      name: create-pipeline
    params:
    - name: gitOrganization
      value: "$(params.gitOrganization)"
    - name: gitSha
      value: "$(params.gitSha)"
    - name: repoName
      value: $(params.repoName)
    - name: gitRef
      value: $(params.gitRef)
    - name: vaultAddress
      value: "https://vault-onehq.apps.hub.internal.onehq.com"
  # Tekton params
    - name: pipelineType
      value: '$(params.pipelineType)'
    - name: pipelineInstance
      value: $(params.pipelineInstance)
    when:
      - input: "$(params.repoName)"
        operator: notin 
        values: ["hqueue","hqadmin","hqconversions-v2","auditing_api","hqsso"]

  - name: create-pipeline-azure
    runAfter:
    - fetch-from-git
    workspaces:
    - name: source
      workspace: git-source
    taskRef:
      name: create-pipeline-azure
    params:
    - name: gitOrganization
      value: "$(params.gitOrganization)"
    - name: gitSha
      value: "$(params.gitSha)"
    - name: repoName
      value: $(params.repoName)
    - name: gitRef
      value: $(params.gitRef)
    - name: vaultAddress
      value: "https://vault-onehq.apps.hub.internal.onehq.com"
  # Tekton params
    - name: pipelineType
      value: '$(params.pipelineType)'
    - name: pipelineInstance
      value: $(params.pipelineInstance)
    when:
      - input: "$(params.repoName)"
        operator: in 
        values: ["hqueue","hqadmin","hqconversions-v2","auditing_api","hqsso"]
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: create-pipeline
spec:
  workspaces:
  - name: source
    description: The folder where we write the message to
  params:
  # Helm version
  - name: helmVersion
    type: string
    description: Helm version
    default: '3.8.2'
  # Git params
  - name: gitOrganization
  - name: gitSha
  - name: gitRef
    type: string
    description: Git refspec  
  - name: repoName
    type: string
    description: Git repository name
  # Tekton params
  - name: pipelineType
    default: 'pr'
  - name: pipelineInstance
    type: string
  # Vault params
  - name: vaultAddress
    type: string
    description: Vault address
  - name: vaultVersion
    type: string
    description: Vault CLI version
    default: "1.6.3"
  # OpenShift params
  - name: ocVersion
    type: string
    description: oc CLI version
    default: "4.7"
  volumes:
  - name: custom-trusted-ca
    configMap:
      name: custom-trusted-ca
  - name: vault-secrets
    emptyDir: {}
  - name: aws-password
    emptyDir: {}
  - name: oidc-token
    projected:
      sources:
        - serviceAccountToken:
            path: oidc-token
            expirationSeconds: 1800
  steps:
    - name: vault
      image: 'vault:$(params.vaultVersion)'        
      volumeMounts:
      - mountPath: /var/run/secrets/tokens
        name: oidc-token
      - mountPath: /vault-secrets
        name: vault-secrets
      - mountPath: /usr/local/share/ca-certificates/extra
        name: custom-trusted-ca
      - mountPath: /var/run/secrets/aws
        name: aws-password
      env:
      - name: HOME
        value: "/tekton/home"
      - name: "KUBERNETES_SERVICE_ACCOUNT_TOKEN"
        value: "/var/run/secrets/tokens/oidc-token"
      script: |
        set -xeo pipefail
        # Add service-account to generic group depending on app and branch. Two groups: app-main-pipeline and app-pr-pipeline
        export VAULT_CACERT=/usr/local/share/ca-certificates/extra/ca-bundle.crt
        export VAULT_ADDR=$(params.vaultAddress)

        vault write -field=token auth/jwt-hub/login role=onehq-pipelines jwt=@${KUBERNETES_SERVICE_ACCOUNT_TOKEN} > ~/.vault-token

        echo "Adding permissions to Vault..."
        vault write auth/jwt-hub/role/$(params.pipelineInstance) \
          role_type=jwt \
          bound_subject="system:serviceaccount:$(params.pipelineInstance):build-bot" \
          bound_audiences="https://oidc-issuer.apps.hub.internal.onehq.com" \
          user_claim="sub" \
          policies=$(params.repoName)-$(params.pipelineType)-pipeline \
          ttl=2h
        
        echo "Get github token..."
        vault kv get -field=token secret/github/machinehq/tekton-personal-token > /vault-secrets/github-password
                
        echo "Get AWS creds for ECR..."
        vault kv get -field=access_key_id secret/aws/ecr-user > /var/run/secrets/aws/aki
        vault kv get -field=secret_access_key secret/aws/ecr-user > /var/run/secrets/aws/sak
    - name: get-aws-credentials
      image: 'amazon/aws-cli'
      volumeMounts:
      - mountPath: /var/run/secrets/tokens
        name: oidc-token
      - mountPath: /var/run/secrets/aws
        name: aws-password
      env:
      - name: HOME
        value: "/tekton/home"
      - name: "KUBERNETES_SERVICE_ACCOUNT_TOKEN"
        value: "/var/run/secrets/tokens/oidc-token"
      script: |
        set -x
        export AWS_ACCESS_KEY_ID=$(cat /var/run/secrets/aws/aki);
        export AWS_SECRET_ACCESS_KEY=$(cat /var/run/secrets/aws/sak);
        aws ecr get-login-password --region us-east-2 | tee /var/run/secrets/aws/ecr-password        

    - name: create-projects
      image: 'quay.io/openshift/origin-cli:$(params.ocVersion)'
      workingDir: "/tekton/home"
      env:
      - name: HOME
        value: "/tekton/home"
      volumeMounts:


      - mountPath: /var/run/secrets/tokens
        name: oidc-token
      - mountPath: /vault-secrets
        name: vault-secrets
      - mountPath: /var/run/secrets/aws
        name: aws-password
      script: |
        #!/usr/bin/env bash
        set -eo pipefail
        PROJECT_MATCHES=$(oc get projects | awk '($1=="$(params.pipelineInstance)"){print $1}' | wc -l )
        if [ "$PROJECT_MATCHES" = "1" ]; then
          echo "Project already existing, skipping...";
        elif [ "$PROJECT_MATCHES" = "0" ]; then
          echo "Creating project for the namespace...";
          oc new-project $(params.pipelineInstance);

          # Give admin rights to build-bot for the pipeline namespace
          oc create rolebinding admin-pipeline --clusterrole=admin --serviceaccount=$(params.pipelineInstance):build-bot
        else
          exit 1
        fi
        oc create clusterrolebinding $(params.pipelineInstance)-sccadmin --clusterrole=sccadmin --serviceaccount=$(params.pipelineInstance):build-bot -o yaml --dry-run=client | oc apply -n $(params.pipelineInstance) -f -

        oc create secret generic machinehq-github --type="kubernetes.io/basic-auth" --from-literal=username=machinehq --from-file=password=/vault-secrets/github-password -o yaml --dry-run=client   | oc apply -n $(params.pipelineInstance) -f -
        oc annotate secret machinehq-github tekton.dev/git-0=https://github.com -n $(params.pipelineInstance) --overwrite

        oc create secret docker-registry regcred \
          --docker-server=https://237082684006.dkr.ecr.us-east-2.amazonaws.com \
          --docker-username=AWS \
          --docker-password=$(cat /var/run/secrets/aws/ecr-password) \
          --namespace $(params.pipelineInstance) \
          --dry-run=client -o yaml | oc apply -f - 
        oc annotate secret regcred "tekton.dev/docker-0"="https://237082684006.dkr.ecr.us-east-2.amazonaws.com" -n $(params.pipelineInstance) --overwrite=true
        #oc create secret generic regcred --type=kubernetes.io/dockerconfigjson --from-file=.dockerconfigjson=/vault-secrets/gar-sa -o yaml --dry-run=client   | oc apply -n $(params.pipelineInstance) -f -


        # Create deployment project
        if [ "$(params.repoName)" = "react-hq" ]; then

          # Create deployment project for PRs

          if [ "$(params.pipelineType)" = "pr"  ] ; then
            INSTANCE_NAME="$(echo $(params.pipelineInstance) | sed 's/-pipeline//g')"
            PROJECT_MATCHES=$(oc get projects | awk -v instance=$INSTANCE_NAME '($1==instance ){print $1}' | wc -l )

            if [ "$PROJECT_MATCHES" = "1" ]; then
              echo "Project already existing, skipping...";
            elif [ "$PROJECT_MATCHES" = "0" ]; then
              echo "Creating project...";
              oc new-project $INSTANCE_NAME;
              oc create rolebinding admin-pipeline --clusterrole=admin --serviceaccount=$(params.pipelineInstance):build-bot -n $INSTANCE_NAME
            else
              exit 1
            fi

            oc create rolebinding hq-product --clusterrole=edit --group=hq-product -o yaml --dry-run -n $INSTANCE_NAME | oc apply -f -
            oc create rolebinding hq-platform --clusterrole=edit --group=hq-platform -o yaml --dry-run -n $INSTANCE_NAME | oc apply -f -

          # Create deployment project for staging and production
          else
            oc new-project $(params.repoName)-staging || oc project $(params.repoName)-staging;
            oc new-project $(params.repoName)-production || oc project $(params.repoName)-production;
            oc create rolebinding admin-pipeline --clusterrole=admin --serviceaccount=$(params.pipelineInstance):build-bot -o yaml --dry-run -n $(params.repoName)-staging | oc apply -f -
            oc create rolebinding admin-pipeline --clusterrole=admin --serviceaccount=$(params.pipelineInstance):build-bot -o yaml --dry-run -n $(params.repoName)-production | oc apply -f -
            oc create rolebinding hq-product --clusterrole=view --group=hq-product -o yaml --dry-run -n $(params.repoName)-staging | oc apply -f -
            oc create rolebinding hq-platform --clusterrole=edit --group=hq-platform -o yaml --dry-run -n $(params.repoName)-staging | oc apply -f -
            oc create rolebinding hq-product --clusterrole=view --group=hq-product -o yaml --dry-run -n $(params.repoName)-production | oc apply -f -
            oc create rolebinding hq-platform --clusterrole=edit --group=hq-platform -o yaml --dry-run -n $(params.repoName)-production | oc apply -f -
          fi

          
        fi

        
       

    - name: create-pipeline
      workingDir: $(workspaces.source.path)
      image: alpine/helm:$(params.helmVersion)
      env:
      - name: HOME
        value: "/tekton/home"
      script: |
        set -eo pipefail
        
        helm dep up .tekton
        helm upgrade --install $(params.pipelineInstance) .tekton  --namespace=$(params.pipelineInstance) \
          --values=.tekton/values-$(params.pipelineType).yaml --set git.organization=$(params.gitOrganization) \
          --set git.repository=$(params.repoName) --set git.sha=$(params.gitSha) \
          --set git.ref=$(params.gitRef) --set global.taskAnnotations."vault\.security\.banzaicloud\.io\/vault-role"="$(params.pipelineInstance)"
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: create-pipeline-azure
spec:
  workspaces:
  - name: source
    description: The folder where we write the message to
  params:
  # Helm version
  - name: helmVersion
    type: string
    description: Helm version
    default: '3.8.2'
  # Git params
  - name: gitOrganization
  - name: gitSha
  - name: gitRef
    type: string
    description: Git refspec  
  - name: repoName
    type: string
    description: Git repository name
  # Tekton params
  - name: pipelineType
    default: 'pr'
  - name: pipelineInstance
    type: string
  # Vault params
  - name: vaultAddress
    type: string
    description: Vault address
  - name: vaultVersion
    type: string
    description: Vault CLI version
    default: "1.6.3"
  # OpenShift params
  - name: ocVersion
    type: string
    description: oc CLI version
    default: "4.7"
  volumes:
  - name: custom-trusted-ca
    configMap:
      name: custom-trusted-ca
  - name: vault-secrets
    emptyDir: {}
  - name: azure-password
    emptyDir: {}
  - name: oidc-token
    projected:
      sources:
        - serviceAccountToken:
            path: oidc-token
            expirationSeconds: 1800
  steps:
    - name: vault
      image: 'vault:$(params.vaultVersion)'        
      volumeMounts:
      - mountPath: /var/run/secrets/tokens
        name: oidc-token
      - mountPath: /vault-secrets
        name: vault-secrets
      - mountPath: /usr/local/share/ca-certificates/extra
        name: custom-trusted-ca
      - mountPath: /var/run/secrets/azure
        name: azure-password
      env:
      - name: HOME
        value: "/tekton/home"
      - name: "KUBERNETES_SERVICE_ACCOUNT_TOKEN"
        value: "/var/run/secrets/tokens/oidc-token"
      script: |
        set -xeo pipefail
        # Add service-account to generic group depending on app and branch. Two groups: app-main-pipeline and app-pr-pipeline
        export VAULT_CACERT=/usr/local/share/ca-certificates/extra/ca-bundle.crt
        export VAULT_ADDR=$(params.vaultAddress)

        vault write -field=token auth/jwt-hub/login role=onehq-pipelines jwt=@${KUBERNETES_SERVICE_ACCOUNT_TOKEN} > ~/.vault-token

        echo "Adding permissions to Vault..."
        vault write auth/jwt-hub/role/$(params.pipelineInstance) \
          role_type=jwt \
          bound_subject="system:serviceaccount:$(params.pipelineInstance):build-bot" \
          bound_audiences="https://oidc-issuer.apps.hub.internal.onehq.com" \
          user_claim="sub" \
          policies=$(params.repoName)-$(params.pipelineType)-pipeline \
          ttl=2h
        
        echo "Get github token..."
        vault kv get -field=token secret/github/machinehq/tekton-personal-token > /vault-secrets/github-password
                
        echo "Get Azure creds for ACR..."
        vault kv get -field=access_key_id secret/azure/acr-user > /var/run/secrets/azure/aki
        vault kv get -field=secret_access_key secret/azure/acr-user > /var/run/secrets/azure/sak

    - name: create-projects
      image: 'quay.io/openshift/origin-cli:$(params.ocVersion)'
      workingDir: "/tekton/home"
      env:
      - name: HOME
        value: "/tekton/home"
      volumeMounts:


      - mountPath: /var/run/secrets/tokens
        name: oidc-token
      - mountPath: /vault-secrets
        name: vault-secrets
      - mountPath: /var/run/secrets/azure
        name: azure-password
      script: |
        #!/usr/bin/env bash
        set -eo pipefail
        PROJECT_MATCHES=$(oc get projects | awk '($1=="$(params.pipelineInstance)"){print $1}' | wc -l )
        if [ "$PROJECT_MATCHES" = "1" ]; then
          echo "Project already existing, skipping...";
        elif [ "$PROJECT_MATCHES" = "0" ]; then
          echo "Creating project for the namespace...";
          oc new-project $(params.pipelineInstance);

          # Give admin rights to build-bot for the pipeline namespace
          oc create rolebinding admin-pipeline --clusterrole=admin --serviceaccount=$(params.pipelineInstance):build-bot
        else
          exit 1
        fi
        oc create clusterrolebinding $(params.pipelineInstance)-sccadmin --clusterrole=sccadmin --serviceaccount=$(params.pipelineInstance):build-bot -o yaml --dry-run=client | oc apply -n $(params.pipelineInstance) -f -

        oc create secret generic machinehq-github --type="kubernetes.io/basic-auth" --from-literal=username=machinehq --from-file=password=/vault-secrets/github-password -o yaml --dry-run=client   | oc apply -n $(params.pipelineInstance) -f -
        oc annotate secret machinehq-github tekton.dev/git-0=https://github.com -n $(params.pipelineInstance) --overwrite

        oc create secret docker-registry regcred \
          --docker-server="https://onehq.azurecr.io" \
          --docker-username=$(cat /var/run/secrets/azure/aki) \
          --docker-password=$(cat /var/run/secrets/azure/sak) \
          --namespace $(params.pipelineInstance) \
          --dry-run=client -o yaml | oc apply -f - 
        oc annotate secret regcred "tekton.dev/docker-0"="https://onehq.azurecr.io" -n $(params.pipelineInstance) --overwrite=true

        # Create deployment project
        if [ "$(params.repoName)" = "react-hq" -o "$(params.repoName)" = "hqsso" -o "$(params.repoName)" = "hqadmin" -o "$(params.repoName)" = "hqueue" -o "$(params.repoName)" = "hqconversions-v2" -o "$(params.repoName)" = "auditing_api" ]; then

          # Create deployment project for PRs

          if [ "$(params.pipelineType)" = "pr"  ] ; then
            INSTANCE_NAME="$(echo $(params.pipelineInstance) | sed 's/-pipeline//g' | sed 's/hqconversions-v2/launch/g')"
            PROJECT_MATCHES=$(oc get projects | awk -v instance=$INSTANCE_NAME '($1==instance ){print $1}' | wc -l )

            if [ "$PROJECT_MATCHES" = "1" ]; then
              echo "Project already existing, skipping...";
            elif [ "$PROJECT_MATCHES" = "0" ]; then
              echo "Creating project...";
              oc new-project $INSTANCE_NAME;
              oc create rolebinding admin-pipeline --clusterrole=admin --serviceaccount=$(params.pipelineInstance):build-bot -n $INSTANCE_NAME
            else
              exit 1
            fi

            oc create rolebinding hq-product --clusterrole=edit --group=hq-product -o yaml --dry-run -n $INSTANCE_NAME | oc apply -f -
            oc create rolebinding hq-platform --clusterrole=edit --group=hq-platform -o yaml --dry-run -n $INSTANCE_NAME | oc apply -f -

          # Create deployment project for staging and production
          else
            INSTANCE_NAME="$(echo $(params.repoName) | sed 's/hqconversions-v2/launch/g')"
            oc new-project $INSTANCE_NAME-staging || oc project $INSTANCE_NAME-staging;
            oc new-project $INSTANCE_NAME-production || oc project $INSTANCE_NAME-production;
            oc create rolebinding admin-pipeline --clusterrole=admin --serviceaccount=$(params.pipelineInstance):build-bot -o yaml --dry-run -n $INSTANCE_NAME-staging | oc apply -f -
            oc create rolebinding admin-pipeline --clusterrole=admin --serviceaccount=$(params.pipelineInstance):build-bot -o yaml --dry-run -n $INSTANCE_NAME-production | oc apply -f -
            oc create rolebinding hq-product --clusterrole=view --group=hq-product -o yaml --dry-run -n $INSTANCE_NAME-staging | oc apply -f -
            oc create rolebinding hq-platform --clusterrole=edit --group=hq-platform -o yaml --dry-run -n $INSTANCE_NAME-staging | oc apply -f -
            oc create rolebinding hq-product --clusterrole=view --group=hq-product -o yaml --dry-run -n $INSTANCE_NAME-production | oc apply -f -
            oc create rolebinding hq-platform --clusterrole=edit --group=hq-platform -o yaml --dry-run -n $INSTANCE_NAME-production | oc apply -f -
          fi

          
        fi

        
       

    - name: create-pipeline
      workingDir: $(workspaces.source.path)
      image: alpine/helm:$(params.helmVersion)
      env:
      - name: HOME
        value: "/tekton/home"
      script: |
        set -eo pipefail
        
        helm dep up .tekton
        helm upgrade --install $(params.pipelineInstance) .tekton  --namespace=$(params.pipelineInstance) \
          --values=.tekton/values-$(params.pipelineType).yaml --set git.organization=$(params.gitOrganization) \
          --set git.repository=$(params.repoName) --set git.sha=$(params.gitSha) \
          --set git.ref=$(params.gitRef) --set global.taskAnnotations."vault\.security\.banzaicloud\.io\/vault-role"="$(params.pipelineInstance)"

